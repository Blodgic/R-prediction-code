aggregate(Ontario~format(Ontario$Date, "%d-%b-%y", data=Ontario$Ontario.Demand, FUN=mean))
Ontario.Mean <- ddply(OntarioDemand, .(OntarioDemand$Date),
summarize, mean=mean(OntarioDemand$Ontario.Demand))
library(ddply)
library(plyr)
Ontario.Mean <- ddply(OntarioDemand, .(OntarioDemand$Date),
summarize, mean=mean(OntarioDemand$Ontario.Demand))
Ontario.Mean <- ddply(Ontario$Ontario.Demand, .(OntarioDemand$Date),
summarize, mean=mean(OntarioDemand$Ontario.Demand))
Ontario.Mean <- ddply(Ontario$Ontario.Demand, .(Ontario$Date),
summarize, mean=mean(Ontario$Ontario.Demand))
aggregate(Ontario$Ontario.Demand, by=Ontario$Date, FUN = mean)
Ontario.Mean <-with(Ontario,
tapply(Ontario$Ontario.Demand, Ontario$Date, mean))
View(Ontario.Mean)
Ontario.Mean <- as.data.frame(Ontario.Mean)
names(Ontario.Mean)
View(Ontario.Mean)
Ontario.Mean
Ontario.Mean1 <- merge(Ontario.Mean, Ontario, by.x='row.names', by.y='Date')
View(Ontario.Mean1)
names(Ontario.Mean1)[1] <- paste("Date")
View(Ontario.Mean1)
Ontario.sd <-with(Ontario,
tapply(Ontario$Ontario.Demand, Ontario$Date, sd))
View(Ontario.sd)
Ontario.Mean1 <- merge(Ontario.sd, Ontario.Mean1, by.x='x', by.y='Date')
View(Ontario.Mean1)
View(Ontario.sd)
plot(Ontario.sd)
View(Ontario.sd)
names(Ontario.sd)[1] <- paste("Date")
names(Ontario.sd)[2] <- paste("Standard_Deviation")
View(Ontario.sd)
Ontario.sd <-with(Ontario,
tapply(Ontario$Ontario.Demand, Ontario$Date, sd))
View(Ontario.sd)
Ontario.sd <- as.data.frame(Ontario.sd)
names(Ontario.sd)[1] <- paste("Date")
names(Ontario.sd)[2] <- paste("Standard_Deviation")
View(Ontario.sd)
names(Ontario.sd)[0] <- paste("Date")
names(Ontario.sd)[1] <- paste("Standard_Deviation")
View(Ontario.sd)
Ontario.Summary <- merge(Ontario.sd, Ontario.Mean1, by.x='row.names', by.y='Date')
Ontario[order(as.Date(Ontario$Date,"%d-%b-%y"), decreasing= TRUE),]
Ontario.Order <- Ontario[order(as.Date(Ontario$Date,"%d-%b-%y"), decreasing= TRUE),]
View(Ontario.Order)
testset <- Ontario[Ontario$Date>="13-Feb-04" & Ontario$Date<="13-Mar-04"]
View(Ontario$Date)
as.Date(Ontario$Date, format="%d-%b-%y")
testset <- Ontario[Ontario$Date>="13-Feb-04" & Ontario$Date<="13-Mar-04"]
testset <- Ontario[Ontario$Date >= "13-Feb-04" & Ontario$Date <= "13-Mar-04"]
View(Ontario)
testset <- subset(Ontario$Date >= "13-Feb-04" & Ontario$Date <= "13-Mar-04")
ts(Ontario, start=13-Feb-04, end=13-Mar-04)
ts(Ontario, start="13-Feb-04", end="13-Mar-04")
subset(Ontario$Date, cycle(Ontario$Date >="13-Feb-04" & <= "13-Mar-04"))
as.Date(Ontario$Date, format="%d-%b-%y")
summary(Ontario$Date)
summary(Ontario)
Ontario <- as.Date(Ontario$Date, format="%d-%b-%y")
View(Ontario)
as.Date(Ontario$Date, format="%d-%b-%y")
Ontario <- read.csv(file.choose(), sep = ",", fill = TRUE)
as.Date(Ontario$Date, format="%d-%b-%y")
Ontario.Mean <-with(Ontario,
tapply(Ontario$Ontario.Demand, Ontario$Date, mean))
Ontario.Mean <- as.data.frame(Ontario.Mean)
View(Ontario.Mean)
names(Ontario.Mean)
Ontario.Mean1 <- merge(Ontario.Mean, Ontario, by.x='row.names', by.y='Date')
View(Ontario.Mean1)
Ontario.sd <-with(Ontario,
tapply(Ontario$Ontario.Demand, Ontario$Date, sd))
View(Ontario.sd)
mydat[order(as.Date(mydat$date, "%m/%d/%Y"), decreasing = TRUE),]
mydat[order(as.Date(Ontario$Date, "%m/%d/%Y"), decreasing = TRUE),]
Ontario[order(as.Date(Ontario$Date, "%m/%d/%Y"), decreasing = TRUE),]
View(Ontario)
Ontario.Sorted <- Ontario[order(as.Date(Ontario$Date, "%m/%d/%Y"), decreasing = TRUE),]
View(Ontario.Sorted)
Ontario.Sorted <- Ontario[order(as.Date(Ontario$Date, "%m/%d/%Y"), decreasing = TRUE),]
View(Ontario.Sorted)
Ontario.Order <- Ontario[order(as.Date(Ontario$Date,"%d-%b-%y"), decreasing= TRUE),]
View(Ontario.Order)
as.Date(Ontario$Date, format="%d-%b-%Y")
View(Ontario$Date)
Ontario$Date.f <- strptime(as.character(Ontario$Date,"%d-%b-%y"))
Ontario <- read.csv(file.choose(), sep = ",", fill = TRUE)
Ontario$Date.f <- strptime(as.character(Ontario$Date,"%d-%b-%y"))
Ontario$Date.f <- strptime(as.character(Ontario$Date,format="%d-%b-%y"))
as.Date(Ontario$Date, format="%d-%b-%y")
format(Ontario$Date, "%Y-%m-%d")
str(Ontario)
format(Ontario$Date, format="%d-%b-%y")
str(Ontario)
testdata <- subset(Ontario, Date >= as.Date("13-Feb-04", "%d-%b-%y") & Date <= as.Date("13-Mar-04", %d-%b-%y"))
testdata <- subset(Ontario, Ontario$Date >= as.Date("13-Feb-04", "%d-%b-%y") & DateOntario$Date <= as.Date("13-Mar-04", %d-%b-%y"))
format(Ontario$Date, format="%d-%b-%y")
format(Ontario$Date, "%d-%b-%y")
format(Ontario$Date, "%d-%b-%y")
format(Ontario$Date, format="%d-%b-%y")
View(Ontario$Date)
Ontario$Date <- format(Ontario$Date, format="%d-%b-%y")
View(Ontario$Date)
Ontario$Date <- as.Date(Ontario$Date)
str(Ontario$Date)
Ontario$Date.f <- strptime(as.character(Ontario$Date), "%d-%b-%y")
format(Ontario$Date.f, "%Y-%m-%d")
View(Ontario)
testdata <- Ontario[Ontario$Date.f>="2004-02-13" & Ontario$Date.f<="2004-03-13"]
testdata <- Ontario[Date.f>="2004-02-13" & Date.f<="2004-03-13"]
Ontario$Date.f <- as.Date(Ontario$Date.f)
testdata <- Ontario[Date.f>="2004-02-13" & Date.f<="2004-03-13"]
testdata <- Ontario[Ontario$Date.f>="2004-02-13" & Ontario$Date.f<="2004-03-13"]
str(Ontario)
testdata <- Ontario[Ontario$Date.f>="2004-02-13" & Ontario$Date.f<="2004-03-13"]
str(Ontario)
testdata <- Ontario[Date.f>="2004-02-13" & Date.f<="2004-03-13"]
testdata <- Ontario[Ontario$Date.f>="2004-02-13" & Ontario$Date.f<="2004-03-13"]
testdate <- ts(Ontario, start=c(2004, 2), end=c(2004, 3))
View(testdate)
testdata <- ts(Ontario, start=c(2004, 2), end=c(2004, 3), frequency=7)
View(testdata)
testdata <- ts(Ontario, start=c(2004, 1), end=c(2004, 3), frequency=7)
View(testdata)
names(Ontario)
Ontario[,c(5,1,2,3,4)]
View(Ontario)
Ontario <- Ontario[,c(5,1,2,3,4)]
View(Ontario)
testdata <- ts(Ontario, start= "2004-02-13", end="2004-03-13", frequency=7)
testdata <- ts(Ontario, start=c(2004,02,13), end=c(2004,03,13), frequency=7)
View(testdata)
head(Ontario)
testdata
testdata <- ts(Ontario, start=c(2004,02,13), end=c(2004,03,13)
testdata
testdata <- ts(Ontario, start=c(2004,02,13), end=c(2004,03,13))
testdata
testdata <- ts(Ontario, start=c(2004,2,13), end=c(2004,3,13))
testdata
head(Ontario)
str(Ontario)
testdata <- ts(Ontario, start=c(2003), end=c(2004) freqency=&)
testdata <- ts(Ontario, start=c(2003), end=c(2004) freqency=7)
testdata <- ts(Ontario, start=c(2003), end=c(2004) freqency=7))
testdata <- ts(Ontario, start=c(2003), end=c(2004), freqency=7)
testdata <- ts(Ontario, start=(2003), end=(2004), freqency=7)
testdata <- ts(Ontario, start=2003, end=2004, freqency=7)
testdata <- ts(Ontario, start=2003, end=2004, frequency=7)
testdata
testdata <- ts(Ontario, start=c(2003, 3), end=c(2004, 3), frequency=7)
testdata
View(testdata)
head(Ontario)
Date1 <- as.Date("2004-02-13")
Date2 <- as.Date("2004-03-13")
testdata <- Ontario[Ontario$Date.f >= Date1 & Ontario$Date.f <= Date2]
Ontario <- as.data.frame(Ontario)
Date1 <- as.Date("2004-02-13")
Date2 <- as.Date("2004-03-13")
testdata <- Ontario[Ontario$Date.f >= Date1 & Ontario$Date.f <= Date2]
testdata <- Ontario[Ontario$Date.f >= Date1 & Ontario$Date.f <= Date2]
dataselect <- function(x,y){Ontario[Ontario$Date.f >= x  & Ontario$Date.f <= y]}
testdata <- dataselect(Date1,Date2)
library(xts)
testdata <- xts(Ontario, order.by=Ontario$Date.f)
testdata <- xts(Ontario, order.by=Ontario$Date.)
testdata
head(testdata0
head(testdata)
head(testdata)
testdata <- xts(Ontario, order.by=Ontario$Date.f)
head(testdata)
str(testdata)
head(Ontario)
library(zoo)
window(Ontario, start = as.Date("2004-02-15", end= as.Date("2004-03-15")))
Ontario.order <- Ontario[order(as.Date(Ontario$Date.f, format="$y-%m-%d")),]
head(Ontario.order)
tail(Ontario.order)
window(Ontario, start = as.Date("2004-02-13", end= as.Date("2004-03-13")))
window(Ontario, start = as.Date("2004-03-13", end= as.Date("2004-02-13")))
str(Ontario.order)
window(Ontario, start = as.Date("2004-03-13"), end= as.Date("2004-02-13")))
window(Ontario, start = as.Date("2004-03-13"), end= as.Date("2004-02-13"))
window(Ontario$Date.f, start = as.Date("2004-03-13"), end= as.Date("2004-02-13"))
window(Ontario$Date.f, start = as.Date("2004-02-13"), end= as.Date("2004-03-13"))
window(Ontario, start = as.Date("2004-02-13"), end= as.Date("2004-03-13"))
str(Ontario.order)
str(Ontario)
window(Ontario, start = as.Date("2004-02-13"), end= as.Date("2004-03-13"))
Ontario$Date <- format(Ontario$Date, format="%d-%b-%y")
Ontario$Date <- as.Date(Ontario$Date)
Ontario$Date.f <- strptime(as.character(Ontario$Date), "%d-%b-%y")
format(Ontario$Date.f, "%Y-%m-%d")
Ontario$Date.f <- as.Date(Ontario$Date.f)
str(Ontario)
testdata <- ts(Ontario$Ontario.Demand, frequency=24)
testdata
head(testdata)
demand <- read.csv(file.choose(), sep = ",", fill = TRUE)
freq <- 24
days.mon <- 28
plot(demand$Ontario.Demand)
hist(demand$Ontario.Demand)
demand$Date2 <- as.Date(demand$Date,"%d-%b-%y")
demand$Date2
daily.metrics <- ddply(demand,~Date2,summarise,mean=mean(Ontario.Demand),sd=sd(Ontario.Demand))
plot(daily.metrics$sd~daily.metrics$Date2)
myts <- ts(demand$Ontario.Demand, frequency = freq)  #for predicitng each hour of a day
myts.len <- length(myts)/freq
myts.tr.end <- (myts.len - days.mon)
myts.train <- window(myts, start=1, end=myts.tr.end)
myts.test <- window(myts, start=myts.tr.end+1, end=myts.len)
plot(window(myts, start=myts.tr.end-28, end=myts.len))
fit <- stl(myts.test,s.window="period")
plot(fit)
adf.test(myts)
tsdisplay(myts)
library(forecast)
library(plyr)
library(tseries)
adf.test(myts)
tsdisplay(myts)
tsdisplay(diff(myts,differences=1))
fit <- auto.arima(myts.train)
myts.len
myts.tr.end
plot(daily.metrics$sd~daily.metrics$Date2)
myts.train
head(myts.train)
myts.test <- window(myts, start=myts.tr.end+1, end=myts.len)
head(myts.test)
plot(window(myts, start=myts.tr.end-28, end=myts.len))
plot(fit)
fit <- stl(myts.test,s.window="period")
plot(fit)
myts
testdata <- ts(Ontario$Ontario.Demand, frequency=24)
head(testdata)
plot(testdata)
myts.len
myts.train <- window(myts, start=1, end=myts.tr.end)
head(myts.train)
myts.train
testdata
length(testdata)
length(testdata/24)
length(testdata/24)
length(testdata)/24
myts.train
View(myts.train)
plot(window(myts, start=myts.tr.end-28, end=myts.len))
View(testdata)
plot(testdata)
plot(testdata)
lenght(testdata)
length(testdata)
length(testdata) - 720
length(testdata) - 720
testdata.holdout <- NROW(15663:16383)
testdata.holdout
testdata.holdout <- testdata[15663:16383]
testdata.holdout
testdata.other <- testdata[1:15662]
plot(testdata.holdout)
testdata.holdout.ts <- ts(testdata.holdout, frequency=24)
plot(testdata.holdout.ts)
testdata.other.ts <- ts(testdata.other.ts, frequency=24)
testdata.other.ts <- ts(testdata.other, frequency=24)
plot(testdata.other.ts)
plot(testdata.holdout.ts)
hist(Ontario$Ontario.Demand)
library(forecast)
library(plyr)
library(tseries)
fit <- auto.arima(testdata.holdout.ts)
fit.f <- forecast(testdata.other.ts, fit)
fit.f <- forecast(fit, 30)
plot(fit.f)
fit.f <- forecast(fit, 24)
plot(fit.f)
fit.f <- forecast(fit, 30)
plot(fit.f)
plot(fcast)
fit <- auto.arima(myts.train)
fcast <- forecast(fit,days.mon)
plot(fcast)
plot(testdata.other.ts)
fit.o <- auto.arima(testdata.other.ts)
plot(fit.f)
arima.fit <- arima(testdata.holdout.ts, order=c(1,0,1))
tsdiag(arima.fit)
plot(fit.f)
arima.fit <- arima(testdata.holdout.ts, order=c(2,1,0))
tsdiag(arima.fit)
tsdiag(fit.f)
arima.fit <- arima(testdata.holdout.ts, order=c(2,0,0))
tsdiag(arima.fit)
arima.fit <- arima(testdata.holdout.ts, order=c(2,2,2))
tsdiag(arima.fit)
arima.fit <- arima(testdata.holdout.ts, order=c(2,0,0))
tsdiag(arima.fit)
tsdiag(fit.f)
tsdiag(testdata.holdout.ts)
plot(fit.f)
fit.f
tsdiag(fit.f)
fit.arima <- arima.fit(fit.f)
fit.arima <- arima(fit.f)
fit.arima <- arima(testdata.holdout.ts)
tsdiag(fit.arima)
tsdiag(fit.arima, order=c(2,0,0))
plot(fit.f)
tsdiag(fit.arima, order=c(2,1,0)(2,0,0))
tsdiag(fit.arima, order=c(4,2,2))
fit.p <- predict(fit)
plot(fit)
fit.p
fit.p <- predict(fit, n.ahead=30)
fit.p
plot(fit.p)
plot(fit.f)
fit.f <- forecast(fit, 720)
plot(fit.f)
fit.f <- forecast(fit, 30)
plot(fit.f)
plot(fit.f)
fit <- auto.arima(testdata.holdout.ts)
fit.f <- forecast(fit, 30)
plot(fit.f)
fit.f
fit.arima <- auto.arima(testdata.holdout.ts)
fit.arima <- forecast(fit, 30)
plot(fit.arima)
fit.arma <- arma(testdata.holdout.ts)
fit.arma <- arma(testdata.holdout.ts, order=c(2,1,0))
fit.arma <- forecast(fit.arma)
fit.arma <- forecast(fit.arma, 30)
fit <- auto.arima(testdata.holdout.ts)
fit.arima <- forecast(fit, 30)
plot(fit.arima)
fit.arima
fit.arma <- arma(testdata.holdout.ts, order=c(2,1,0,2,0,0))
plot(fit.arma)
plot(Ontario.sd)
View(Ontario.Mean1)
fit.arma
fit.arima
plot(testdata.holdout.ts)
plot(testdata.other.ts)
fit <- auto.arima(testdata.holdout.ts)
fit.arima <- forecast(fit, 30)
plot(fit.arima)
fit.arima <- forecast(fit, 720)
plot(fit.arima)
fit <- auto.arima(testdata.other.ts)
fit.arima <- forecast(fit, 30)
plot(fit.arima)
fit.arima
fit.arma <- arma(testdata.other.ts, order=c(2,1,0,2,0,0))
plot(fit.arma)
plot(fit.arma)
fit.arma <- arma(testdata.other.ts, order=c(2,1,0)
fit.arma <- arma(testdata.other.ts, order=c(2,1,0))
fit.arma <- arma(testdata.other.ts, order=c(2,1,0,2,1,0))
plot(fit.arma)
plot(fit.arima)
plot(testdata.other.ts)
library(dplyr)
library(coefplot)
library(ggplot2)
library(Hmisc)
HDLo <- read.csv(file.choose(), sep = ",", fill = TRUE)
HDLo.clean <- na.omit(HDLo)
summary(HDLo.clean)
str(HDLo.clean)
hist(HDLo.clean$density_2010)
hist(HDLo.clean$density_2000)
View(HDLo.clean)
summary(HDLo.clean)
str(HDLo.clean)
names(HDLo.clean)
hist(HDLo.clean$density_2000)
View(HDLo.clean)
describe(HDLo.clean)
dim(HDLo.clean)
HDLo.clean$HD_present <- ifelse(HDLo.clean$HDcount > 0, 1,0)
HDLo.clean$Lo_present <- ifelse(HDLo.clean$Lcount > 0, 1,0)
reg1 <- lm(HDLo.clean$HD_present ~ HDLo.clean$Lo_present + pop_2000 +
pop_2010 + income_2000 + income_2010 + pct_U18_2000 +
pct_U18_2010 + pctcollege_2000 + pctcollege_2010 + ownhome_2000 +
ownhome_2010 + density_2000 + density_2010 + pctwhite_2000 +
pctwhite_2010 + pctblack_2000 + pctblack_2010, data=HDLo.clean)
reg_summary <- summary(reg1)
reg_summary
x <- HDLo.clean[24:25]
y <- HDLo.clean[8:23]
correlation <- cor(x,y)
HD.glm <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, family=binomial(link=logit),
data=HDLo.clean)
summary(HD.glm)
confint(HD.glm)
View(HDLo.clean)
summary(HDLo.clean.predict)
summary(HDLo.clean.predict)
HDLo.clean.predict<- as.data.frame(HDLo.clean.predict )
HD.glm <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, family=binomial(link=logit),
data=HDLo.clean)
summary(HD.glm)
HD.glm <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, family=binomial(link=poisson),
data=HDLo.clean)
pctwhite_2010  + pctblack_2010, family=binomial(link=log),
HD.glm <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, family=binomial(link=log),
data=HDLo.clean)
HD.glm <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, data=HDLo.clean,
family=poisson(),
)
HD.glm <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, family=binomial(link=logit),
data=HDLo.clean)
HD.glm.poisson <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, data=HDLo.clean,
family=poisson(),
)
summary(HD.glm.poisson)
View(HD.glm.poisson)
HD.glm.quasibi <- glm(HDLo.clean$HD_present ~
log(pop_2010 + 1) + income_2010 +  ownhome_2010 +
ownhome_2010 +  log(density_2010 + 1) + pctcollege_2010 +
pctwhite_2010  + pctblack_2010, data=HDLo.clean,
family=quasibinomial(link=logit),
)
summary(HD.glm.quasibi)
View(top_5_LO_counties)
View(top_5_HD_counties)
HDLo.clean <- HDLo.clean[with(HDLo.clean, order(-HD_predict)),]
HDLo.clean <- HDLo.clean[with(HDLo.clean, order(-HD_predict)),]
HDLo.clean$HD_predict <- predict(HD.glm, HDLo.clean)
HDLo.clean <- HDLo.clean[with(HDLo.clean, order(-HD_predict)),]
HDLo.clean.predict <- HDLo.clean[ which(HDLo.clean$HD_present == 0),]
HDLo.clean.predict<- as.data.frame(HDLo.clean.predict)
summary(HDLo.clean.predict)
top_5_HD_counties <- head(HDLo.clean.predict)
View(top_5_HD_counties)
library(shiny)
library(ggplot2)
shinyServer(function(input, output) {
# a large table, reative to input$show_vars
output$mytable1 <- renderDataTable({
cs2
}, options = list(orderClasses= TRUE))
output$mytable2 <- renderDataTable({
dell_domain
}, options = list(orderClasses= TRUE))
output$mytable3 <- renderDataTable({
dell_ip
}, options = list(orderClasses= TRUE))
output$mytable4 <- renderDataTable({
FSISAC
}, options = list(orderClasses = TRUE))
output$mytable5 <- renderDataTable({
idef
}, options = list(orderClasses = TRUE))
output$cs2plots <- renderPlot(function(){
#Render ggplot
if (input$Intel_Count == "plotTable_ordered.df") {
print(ggplot(data=plotTable_ordered.df, aes(x = Var1, y = Freq), show_guide=TRUE) + geom_bar(stat = "identity") + coord_flip())
}
if (input$Intel_Count == "Actor Count"){
print(ggplot(data=Actor_known, aes(x = actor, y = freq)) + geom_bar(stat = "identity") + coord_flip())
}
if (input$Intel_Count == "indicator_type_plot.df"){
print(ggplot(data=indicator_type_plot.df, aes(x =Var1, y = Freq)) + geom_bar(stat = "identity") + coord_flip())
}
if (input$Intel_Count == "report_count"){
print(ggplot(data=report_sort_top20, aes(x=unique_reports, y=Freq)) + geom_bar(stat = "identity") + coord_flip())
}
else {
print("No Plot")
}
})
})
runApp("Desktop/MSBA/Intel/shiny/")
getwd()
setwd("Desktop/MSBA/")
runApp("Stock1a 2/")
library(shiny)
runApp("Stock1a 2/")
runApp("Stock1a 2/")
